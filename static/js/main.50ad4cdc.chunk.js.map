{"version":3,"sources":["components/UserCard/UserCard.module.scss","components/Input/Input.module.scss","components/Textarea/Textarea.module.scss","components/Sidebar/Sidebar.module.scss","components/Button/Button.module.scss","components/UserProfile/UserProfile.module.scss","components/Loader/Loader.module.scss","feature/ListOfUsers/ListOfUsers.module.scss","components/UsersList/UsersList.module.scss","reducers/list-of-users-reducer.ts","components/Button/Button.tsx","reducers/app-reducer.ts","components/Sidebar/Sidebar.tsx","api/list-of-users-api.ts","components/UserCard/UserCard.tsx","components/UsersList/UsersList.tsx","components/UsersList/UsersListContainer.tsx","components/Input/Input.tsx","components/Textarea/Textarea.tsx","components/UserProfile/UserProfile.tsx","components/UserProfile/UserProfileContainer.tsx","feature/ListOfUsers/ListOfUsers.tsx","components/Loader/Loader.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["module","exports","ListOfUsersActionType","Button","memo","props","success","link","className","restProps","buttonStyle","s","btn","default","AppActionType","initialState","usersList","isEdit","setUsersList","type","SET_USERS_LIST","payload","Sidebar","dispatch","useDispatch","sidebar","wrapper","item","onClick","SORTED_BY_NAME","SORTED_BY_CITY","instance","axios","create","baseURL","usersListAPI","get","UserCard","id","name","city","company","cardWrapper","userInfo","userInfoItem","userInfoItemSpan","buttonMore","to","UsersList","componentsUsersList","map","user","key","address","wrapperUsersList","isLoading","setLoading","SET_LOADING","UsersListContainer","useSelector","state","listOfUsers","useEffect","then","data","catch","error","console","log","message","finally","Input","onChange","onChangeText","onKeyPress","onEnter","title","titleClassName","disabled","finalSpanClassName","errorTitle","finalInputClassName","input","errorInput","e","currentTarget","value","Textarea","finalTextAreaClassName","textArea","errorTextArea","UserProfile","onClickChangeEditMode","errorMessage","formik","useFormik","validate","values","errors","username","email","street","zipcode","phone","website","initialValues","comment","onSubmit","JSON","parse","stringify","titleWrapper","resetForm","handleSubmit","getFieldProps","placeholder","UserProfileContainer","params","useParams","find","String","userID","CHANGE_EDIT_MODE","changeEditMode","ListOfUsers","mainContentWrapper","exact","path","Loader","loader","line","App","app","rootReducer","combineReducers","action","sort","a","b","cityA","toUpperCase","cityB","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50ad4cdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardWrapper\":\"UserCard_cardWrapper__3fysf\",\"userInfoItem\":\"UserCard_userInfoItem__pkPEd\",\"userInfoItemSpan\":\"UserCard_userInfoItemSpan__3o6CS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Input_wrapper__1_Rso\",\"input\":\"Input_input__jw-Sf\",\"errorInput\":\"Input_errorInput__csyrU\",\"title\":\"Input_title__36gJ5\",\"errorTitle\":\"Input_errorTitle__2nreV\",\"disabled\":\"Input_disabled__3_zOL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Textarea_wrapper__l7K-w\",\"textArea\":\"Textarea_textArea__2OVec\",\"errorTextArea\":\"Textarea_errorTextArea__2Rrnu\",\"input\":\"Textarea_input__1-s6S\",\"title\":\"Textarea_title__jXiY3\",\"errorTitle\":\"Textarea_errorTitle__7E8Vl\",\"disabled\":\"Textarea_disabled__HUu0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1DWsX\",\"wrapper\":\"Sidebar_wrapper__2tOII\",\"item\":\"Sidebar_item__2kX2y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__2VTPU\",\"default\":\"Button_default__1dgbP\",\"success\":\"Button_success__3rQgS\",\"link\":\"Button_link__2wLnZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UserProfile_wrapper__1gdS_\",\"titleWrapper\":\"UserProfile_titleWrapper__1i4Id\",\"cardWrapper\":\"UserProfile_cardWrapper__aUAq2\",\"comment\":\"UserProfile_comment__3qz0l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Loader_wrapper__16a98\",\"loader\":\"Loader_loader__bW_Ag\",\"line\":\"Loader_line__1h9RR\",\"line-bounce\":\"Loader_line-bounce__3G5OH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ListOfUsers_wrapper__1-zWh\",\"mainContentWrapper\":\"ListOfUsers_mainContentWrapper__NFHSY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UsersList_wrapper__IwE4w\",\"wrapperUsersList\":\"UsersList_wrapperUsersList__22xNW\"};","import {User} from \"../types/types\";\r\n\r\nenum ListOfUsersActionType {\r\n    SET_USERS_LIST = 'LIST_OF_USERS/SET_USERS_LIST',\r\n    CHANGE_EDIT_MODE = 'LIST_OF_USERS/CHANGE_EDIT_MODE',\r\n    SORTED_BY_CITY = 'LIST_OF_USERS/SORTED_BY_CITY',\r\n    SORTED_BY_NAME = 'LIST_OF_USERS/SORTED_BY_NAME',\r\n}\r\n\r\ntype InitialStateType = {\r\n    usersList: Array<User>,\r\n    isEdit: boolean,\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    usersList: [],\r\n    isEdit: false,\r\n}\r\n\r\nexport type ActionType = SetUsersListType\r\n                       | ChangeEditModeType\r\n                       | SortedByCityType\r\n                       | SortedByNameType;\r\n\r\nexport const listOfUsersReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case ListOfUsersActionType.SET_USERS_LIST:\r\n        case ListOfUsersActionType.CHANGE_EDIT_MODE:\r\n            return {...state, ...action.payload};\r\n        case ListOfUsersActionType.SORTED_BY_CITY:\r\n            return {\r\n                ...state, usersList: [...state.usersList.sort((a, b) => {\r\n                    const cityA = a.address.city.toUpperCase();\r\n                    const cityB = b.address.city.toUpperCase();\r\n                    if (cityA < cityB) {\r\n                        return -1;\r\n                    }\r\n                    if (cityA > cityB) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                })]\r\n            }\r\n        case ListOfUsersActionType.SORTED_BY_NAME:\r\n            return {\r\n                ...state, usersList: [...state.usersList.sort((a, b) => {\r\n                    const cityA = a.name.toUpperCase();\r\n                    const cityB = b.name.toUpperCase();\r\n                    if (cityA < cityB) {\r\n                        return -1;\r\n                    }\r\n                    if (cityA > cityB) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                })]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetUsersListType = ReturnType<typeof setUsersList>;\r\nexport const setUsersList = (usersList: Array<User>) => {\r\n    return {\r\n        type: ListOfUsersActionType.SET_USERS_LIST,\r\n        payload: {\r\n            usersList,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype ChangeEditModeType = ReturnType<typeof changeEditMode>;\r\nexport const changeEditMode = (isEdit: boolean) => {\r\n    return {\r\n        type: ListOfUsersActionType.CHANGE_EDIT_MODE,\r\n        payload: {\r\n            isEdit,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype SortedByCityType = ReturnType<typeof sortedByCity>;\r\nexport const sortedByCity = () => {\r\n    return {\r\n        type: ListOfUsersActionType.SORTED_BY_CITY,\r\n    } as const\r\n}\r\n\r\ntype SortedByNameType = ReturnType<typeof sortedByName>;\r\nexport const sortedByName = () => {\r\n    return {\r\n        type: ListOfUsersActionType.SORTED_BY_NAME,\r\n    } as const\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps, memo} from 'react';\r\nimport s from './Button.module.scss';\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    success?: boolean\r\n    link?: boolean\r\n}\r\n\r\nexport const Button = memo((props: ButtonPropsType) => {\r\n    const {success, link, className, ...restProps} = props;\r\n\r\n    const buttonStyle = `${s.btn} ${success ? s.success : s.default} ${link ? s.link : ''} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={buttonStyle}\r\n            {...restProps}\r\n        />\r\n    );\r\n});","\r\nenum AppActionType {\r\n    SET_LOADING = 'APP/SET_LOADING'\r\n}\r\n\r\ntype InitialState = {\r\n    isLoading: boolean,\r\n}\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n}\r\n\r\ntype ActionType = SetLoadingType;\r\n\r\nexport const AppReducer = (state: InitialState = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case AppActionType.SET_LOADING:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetLoadingType = ReturnType<typeof setLoading>;\r\nexport const setLoading = (isLoading: boolean) => {\r\n    return {\r\n        type: AppActionType.SET_LOADING,\r\n        payload: {\r\n            isLoading\r\n        }\r\n    } as const\r\n}\r\n","import React, {memo} from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport s from './Sidebar.module.scss';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sortedByCity, sortedByName} from \"../../reducers/list-of-users-reducer\";\r\n\r\nexport const Sidebar = memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onClickSortByCity = () => {\r\n        dispatch(sortedByCity());\r\n    }\r\n\r\n    const onClickSortByName = () => {\r\n        dispatch(sortedByName());\r\n    }\r\n\r\n    return (\r\n        <div className={s.sidebar}>\r\n            <div className={s.wrapper}>\r\n                <h3 className={s.item}>Сортировка</h3>\r\n                <Button className={s.item} onClick={onClickSortByName}>По Имени</Button>\r\n                <Button className={s.item} onClick={onClickSortByCity}>По Городу</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import axios from 'axios';\r\nimport {User} from \"../types/types\";\r\n\r\nconst baseURL = 'https://jsonplaceholder.typicode.com/';\r\n\r\nconst instance = axios.create({\r\n    baseURL,\r\n});\r\n\r\nexport const usersListAPI = {\r\n    gitUsers() {\r\n        return instance.get<Array<User>>(`users/`);\r\n    }\r\n}","import React, {memo} from 'react';\r\nimport s from './UserCard.module.scss';\r\nimport {Button} from \"../Button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UserCardPropsType = {\r\n    id: number,\r\n    name: string,\r\n    city: string,\r\n    company: string,\r\n}\r\n\r\nexport const UserCard = memo((props: UserCardPropsType) => {\r\n\r\n    const {\r\n        id,\r\n        name,\r\n        city,\r\n        company,\r\n    } = props;\r\n\r\n    return (\r\n        <div className={s.cardWrapper}>\r\n            <div className={s.userInfo}>\r\n                <div className={s.userInfoItem}>\r\n                    <span className={s.userInfoItemSpan}>ФИО:</span> {name}\r\n                </div>\r\n                <div className={s.userInfoItem}>\r\n                    <span className={s.userInfoItemSpan}>Город:</span> {city}\r\n                </div>\r\n                <div className={s.userInfoItem}>\r\n                    <span className={s.userInfoItemSpan}>Компания:</span> {company}\r\n                </div>\r\n            </div>\r\n            <div className={s.buttonMore}>\r\n                <NavLink to={`/${id}`}>\r\n                    <Button link>Подробнее</Button>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React, {memo} from 'react';\r\nimport s from './UsersList.module.scss';\r\nimport {UserCard} from \"../UserCard/UserCard\";\r\nimport {User} from \"../../types/types\";\r\n\r\ntype UsersListPropsType = {\r\n    usersList: Array<User>,\r\n}\r\n\r\nexport const UsersList = memo((props: UsersListPropsType) => {\r\n\r\n    const {\r\n        usersList,\r\n    } = props;\r\n\r\n    const componentsUsersList = usersList.map((user) => {\r\n        return <UserCard key={user.id}\r\n                         id={user.id}\r\n                         name={user.name}\r\n                         city={user.address.city}\r\n                         company={user.company.name}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h2>Список пользователей</h2>\r\n            <div className={s.wrapperUsersList}>\r\n                {componentsUsersList}\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React, {memo, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {usersListAPI} from \"../../api/list-of-users-api\";\r\nimport {setUsersList} from \"../../reducers/list-of-users-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {User} from \"../../types/types\";\r\nimport {UsersList} from \"./UsersList\";\r\nimport {setLoading} from \"../../reducers/app-reducer\";\r\n\r\nexport const UsersListContainer = memo(() => {\r\n    const dispatch = useDispatch();\r\n\r\n    const usersList = useSelector<AppRootStateType, Array<User>>(state => state.listOfUsers.usersList);\r\n\r\n    useEffect(() => {\r\n        dispatch(setLoading(true));\r\n        usersListAPI.gitUsers()\r\n            .then(({data}) => {\r\n                dispatch(setUsersList(data));\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.message)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setLoading(false));\r\n            });\r\n    }, []);\r\n\r\n    return <UsersList usersList={usersList}/>;\r\n});","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent, memo} from 'react';\r\nimport s from './Input.module.scss'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype InputPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    title?: string\r\n    error?: boolean\r\n    titleClassName?: string\r\n}\r\n\r\nexport const Input = memo((props: InputPropsType) => {\r\n\r\n    const {\r\n        type,\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        title,\r\n        error,\r\n        className,\r\n        titleClassName,\r\n        disabled,\r\n        ...restProps\r\n    } = props;\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.title} ${error ? s.errorTitle : ''} ${titleClassName ? titleClassName : ''}`;\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : ''} ${className}`;\r\n\r\n    return (\r\n        <div className={`${s.wrapper} ${disabled ? s.disabled : ''}`}>\r\n            <span className={finalSpanClassName}>{title}</span>\r\n            <input\r\n                disabled={disabled}\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n        </div>\r\n    );\r\n});","import React, {\r\n    DetailedHTMLProps,\r\n    TextareaHTMLAttributes,\r\n    ChangeEvent, KeyboardEvent\r\n} from 'react';\r\nimport s from './Textarea.module.scss';\r\n\r\ntype DefaultTextareaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype TextareaPropsType = DefaultTextareaPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    title?: string\r\n    error?: boolean\r\n    titleClassName?: string\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n\r\n    const {\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        title,\r\n        error,\r\n        className,\r\n        titleClassName,\r\n        disabled,\r\n        ...restProps\r\n    } = props;\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.title} ${error ? s.errorTitle : ''} ${titleClassName ? titleClassName : ''}`;\r\n    const finalTextAreaClassName = `${s.textArea} ${error ? s.errorTextArea : ''} ${className}`;\r\n\r\n    return (\r\n        <div className={`${s.wrapper} ${disabled ? s.disabled : ''}`}>\r\n            <span className={finalSpanClassName}>{title}</span>\r\n            <textarea\r\n                disabled={disabled}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalTextAreaClassName}\r\n                {...restProps}\r\n            />\r\n        </div>\r\n    );\r\n};","import React, {memo} from 'react';\r\nimport s from './UserProfile.module.scss';\r\nimport {User} from \"../../types/types\";\r\nimport {Input} from \"../Input/Input\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Textarea} from \"../Textarea/Textarea\";\r\n\r\ntype UserProfilePropsType = {\r\n    user: User | undefined,\r\n    isEdit: boolean,\r\n    onClickChangeEditMode: (isEdit: boolean) => void,\r\n}\r\n\r\ntype FormikErrorType = {\r\n    name?: string;\r\n    username?: string;\r\n    email?: string;\r\n    street?: string;\r\n    city?: string;\r\n    zipcode?: string;\r\n    phone?: string;\r\n    website?: string;\r\n    comment?: string;\r\n};\r\n\r\nexport const UserProfile = memo((props :UserProfilePropsType) => {\r\n    const {\r\n        user,\r\n        isEdit,\r\n        onClickChangeEditMode,\r\n    } = props;\r\n\r\n    const errorMessage = 'Field is required';\r\n\r\n    const formik = user && useFormik({\r\n        validate: (values) => {\r\n            const errors: FormikErrorType  = {};\r\n            if (!values.name) {\r\n                errors.name = errorMessage;\r\n            }\r\n            if (!values.username) {\r\n                errors.username = errorMessage;\r\n            }\r\n            if (!values.email) {\r\n                errors.email = errorMessage;\r\n            }\r\n            if (!values.street) {\r\n                errors.street = errorMessage;\r\n            }\r\n            if (!values.city) {\r\n                errors.city = errorMessage;\r\n            }\r\n            if (!values.zipcode) {\r\n                errors.zipcode = errorMessage;\r\n            }\r\n            if (!values.phone) {\r\n                errors.phone = errorMessage;\r\n            }\r\n            if (!values.website) {\r\n                errors.website = errorMessage;\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            name: user.name,\r\n            username: user.username,\r\n            email: user.email,\r\n            street: user.address.street,\r\n            city: user.address.city,\r\n            zipcode: user.address.zipcode,\r\n            phone: user.phone,\r\n            website: user.website,\r\n            comment: '',\r\n        },\r\n        onSubmit: values => {\r\n            console.log(JSON.parse(JSON.stringify(values)));\r\n        },\r\n    });\r\n\r\n    const onClickHandler = () => {\r\n        onClickChangeEditMode(!isEdit);\r\n        if (isEdit) {\r\n            formik?.resetForm();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.titleWrapper}>\r\n                <h2>Профиль пользователя</h2>\r\n                {user && <Button onClick={onClickHandler}>{isEdit ? 'Отмена' : 'Редактировать'}</Button>}\r\n            </div>\r\n            <NavLink onClick={() => onClickChangeEditMode(false)} to={`/`}>\r\n                <Button link>К списку пользователей</Button>\r\n            </NavLink>\r\n            {user ?\r\n                <form className={`${s.cardWrapper} card`} onSubmit={formik?.handleSubmit}>\r\n                    <Input title={'ФИО'}\r\n                           {...formik?.getFieldProps('name')}\r\n                           placeholder={'Иванов Иван Иванович'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.name}\r\n                    />\r\n                    <Input title={'Имя пользователя'}\r\n                           {...formik?.getFieldProps('username')}\r\n                           placeholder={'Ivan'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.username}\r\n                    />\r\n                    <Input title={'E-mail'}\r\n                           {...formik?.getFieldProps('email')}\r\n                           placeholder={'example@mail.com'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.email}\r\n                    />\r\n                    <Input title={'Улица'}\r\n                           {...formik?.getFieldProps('street')}\r\n                           placeholder={'ул. Пушкина'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.street}\r\n                    />\r\n                    <Input title={'Город'}\r\n                           {...formik?.getFieldProps('city')}\r\n                           placeholder={'Москва'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.city}\r\n                    />\r\n                    <Input title={'Zip code'}\r\n                           {...formik?.getFieldProps('zipcode')}\r\n                           placeholder={'12324'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.zipcode}\r\n                    />\r\n                    <Input title={'Телефон'}\r\n                           {...formik?.getFieldProps('phone')}\r\n                           placeholder={'88005553535'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.phone}\r\n                    />\r\n                    <Input title={'Website'}\r\n                           {...formik?.getFieldProps('website')}\r\n                           placeholder={'www.example.com'}\r\n                           disabled={!isEdit}\r\n                           error={!!formik?.errors.website}\r\n                    />\r\n                    <Textarea title={'Комментарий'}\r\n                           {...formik?.getFieldProps('comment')}\r\n                           className={s.comment}\r\n                           disabled={!isEdit}\r\n                    />\r\n                    <Button success disabled={!isEdit}>Отправить</Button>\r\n                </form>\r\n            :  <div>Пользователь не найден</div>}\r\n        </div>\r\n    );\r\n});","import React, {memo, useEffect} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {User} from \"../../types/types\";\r\nimport {usersListAPI} from \"../../api/list-of-users-api\";\r\nimport {changeEditMode, setUsersList} from \"../../reducers/list-of-users-reducer\";\r\nimport {UserProfile} from \"./UserProfile\";\r\nimport {setLoading} from \"../../reducers/app-reducer\";\r\n\r\nexport const UserProfileContainer = memo(() => {\r\n\r\n    const params = useParams<{userID: string}>();\r\n\r\n    const dispatch = useDispatch();\r\n    const usersList = useSelector<AppRootStateType, Array<User>>(state => state.listOfUsers.usersList);\r\n    const isEdit = useSelector<AppRootStateType, boolean>(state => state.listOfUsers.isEdit);\r\n    const user = usersList.find((user) => String(user.id) === params.userID);\r\n\r\n    useEffect(() => {\r\n        dispatch(setLoading(true));\r\n        usersListAPI.gitUsers()\r\n            .then(({data}) => {\r\n                dispatch(setUsersList(data));\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.message)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setLoading(false));\r\n            });\r\n    }, []);\r\n\r\n    const onClickChangeEditMode = (isEdit: boolean) => {\r\n        dispatch(changeEditMode(isEdit));\r\n    }\r\n\r\n    return <UserProfile user={user} isEdit={isEdit} onClickChangeEditMode={onClickChangeEditMode}/>;\r\n});","import React, {memo} from 'react';\r\nimport s from './ListOfUsers.module.scss';\r\nimport {Sidebar} from \"../../components/Sidebar/Sidebar\";\r\nimport {UsersListContainer} from \"../../components/UsersList/UsersListContainer\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {UserProfileContainer} from \"../../components/UserProfile/UserProfileContainer\";\r\n\r\n\r\nexport const ListOfUsers = memo(() => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Sidebar/>\r\n            <div className={s.mainContentWrapper}>\r\n                <Switch>\r\n                    <Route exact path='/:userID'>\r\n                        <UserProfileContainer/>\r\n                    </Route>\r\n                    <Route exact path='/'>\r\n                        <UsersListContainer/>\r\n                    </Route>\r\n                </Switch>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\nimport s from './Loader.module.scss';\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.loader}>\r\n                <div className={s.line}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport './App.scss';\r\nimport {ListOfUsers} from \"../feature/ListOfUsers/ListOfUsers\";\r\nimport {Loader} from \"../components/Loader/Loader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport const App = () => {\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.isLoading);\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <Loader/>}\r\n            <div className=\"App container\">\r\n                <ListOfUsers/>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {listOfUsersReducer} from \"../reducers/list-of-users-reducer\";\r\nimport {AppReducer} from \"../reducers/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    listOfUsers: listOfUsersReducer,\r\n    app: AppReducer,\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport {App} from \"./app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}